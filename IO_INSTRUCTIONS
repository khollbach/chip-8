IO instructions

00E0 -- clear screen
Cxkk -- get random byte
Dxyn -- draw sprite (note: waits for "display interrupt")
Ex9E -- skip if key pressed
ExA1 -- skip if key not pressed
Fx07 -- read delay timer register
Fx0A -- blocking get key press
Fx15 -- write delay timer register
Fx18 -- write sound timer register

---

Could handle clear/draw from inside the interpreter, and then provide a 'render' function for doing the io, which accepts a screen buffer.
* On second thought, maybe not. It feels like it'll be easier to adapt the IO interface to run on different physical hardware if we keep clear() and draw() as separate IO functions.
* Lets definitely package up the current screen implementation in a re-usable way though.

---

NOW:
Re-shape your existing code to match this "interface" idea:
[x] define a Chip8Io trait with the above methods
    * include an "update" method that runs between each
      interpreter instruction. You can check ctrl+c here,
      and do timer updates; this'll simplify the impls of
      the other methods to mostly just be straight-up 'read's.

NOW:
[x] implement it using the existing logic
    [x] pull all the code in main.rs into a `terminal_io` module
    [x] impl `Chip8Io` for TerminalIo { ... }
    [x] (move screen code into terminal io for now)
    [x] misc cleanup: move most of the code in lib.rs into cpu.rs
        then move mem,regs,stack into src/cpu/*
    [x] move draw_sprite impl to the right place in the code
[x] test it out
    NOTE: it's not working right until we:
    1. run an instance of the emulator
    2. `killall chip-8` to kill it without resetting the terminal
        (?)
    3. run it a second time (and then it seems to work)
    The symptoms are keyboard-related.

NEXT:
* We appear to have regressed the quirks test: display wait fails
* We also still don't pass the getkey test -- we get "not halting"

[x] debug quirks / display-wait test
    OK. fixed it.

[ ] debug getkey test

---

The goal for today (Sat Nov 25) is to have this wrapped up by EOD, so we can start thinking about how this would look on the Apple II.
